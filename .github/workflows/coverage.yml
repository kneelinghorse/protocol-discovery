name: Coverage Report

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  coverage:
    name: Generate Coverage Report
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm test -- --coverage --coverageReporters=json --coverageReporters=lcov --coverageReporters=text --coverageReporters=html

      - name: Generate coverage badge
        uses: coverallsapp/github-action@v2
        continue-on-error: true
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ./coverage/lcov.info

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        continue-on-error: true
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: protocol-discovery-coverage
          fail_ci_if_error: false

      - name: Coverage Summary
        run: |
          echo "## Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          npm test -- --coverage --coverageReporters=text-summary 2>&1 | grep -A 10 "Coverage summary" >> $GITHUB_STEP_SUMMARY || true

      - name: Archive coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 30

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v8
        continue-on-error: true
        with:
          script: |
            const fs = require('fs');
            const coveragePath = './coverage/coverage-summary.json';

            if (!fs.existsSync(coveragePath)) {
              console.log('Coverage summary not found');
              return;
            }

            const coverage = JSON.parse(fs.readFileSync(coveragePath, 'utf8'));
            const total = coverage.total;

            const comment = `## ðŸ“Š Coverage Report

            | Metric | Coverage |
            |--------|----------|
            | Statements | ${total.statements.pct.toFixed(2)}% |
            | Branches | ${total.branches.pct.toFixed(2)}% |
            | Functions | ${total.functions.pct.toFixed(2)}% |
            | Lines | ${total.lines.pct.toFixed(2)}% |

            <details>
            <summary>View detailed coverage</summary>

            Coverage artifacts are available in the workflow run.
            </details>`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
